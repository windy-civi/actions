name: "LLM Analysis Action"
description: "Analyzes legislative bills using LLM for summarization and change tracking"

inputs:
  state:
    description: "State to analyze"
    required: true
    default: "wy"
  analyze-versions:
    description: "Analyze bill versions and track changes"
    required: false
    default: "true"
  generate-reports:
    description: "Generate human-readable reports"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pdfplumber click requests

    - name: Set up OpenAI API Key
      shell: bash
      run: |
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "Using repository secret API key"
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        else
          echo "No API key provided - will run in mock mode"
        fi

    - name: Run LLM Bill Analysis
      shell: bash
      run: |
        echo "🤖 Starting LLM Bill Analysis"
        echo "State: ${{ inputs.state }}"
        echo "Analyze versions: ${{ inputs.analyze-versions }}"
        echo "Generate reports: ${{ inputs.generate-reports }}"

        # For now, run the Wyoming analysis
        if [ "${{ inputs.state }}" = "wy" ] || [ "${{ inputs.state }}" = "all" ]; then
          echo "📄 Analyzing Wyoming bills..."

                  # Check if data_processed exists (from Wyoming repository)
        if [ -d "data_output/data_processed" ]; then
          echo "📄 Found data_processed directory, analyzing bills..."
          
          # Run analysis on the processed data
          python openstates_scraped_data_formatter/cli_bill_tracker.py analyze \
            --show-summary \
            --verbose \
            --output "wyoming_llm_analysis_$(date +%Y%m%d_%H%M%S).json"

          echo "✅ Wyoming analysis complete"
        elif [ -d "sample_data/wy_sample" ]; then
          echo "📄 Found sample data, analyzing for testing..."
          
          python openstates_scraped_data_formatter/cli_bill_tracker.py analyze \
            --show-summary \
            --verbose \
            --output "wyoming_llm_analysis_$(date +%Y%m%d_%H%M%S).json"

          echo "✅ Wyoming sample analysis complete"
        else
          echo "⚠️ No data found - neither data_output/data_processed nor sample_data/wy_sample"
          echo "📁 Available directories:"
          ls -la
        fi
        fi

        # Future: Add other states here
        # if [ "${{ inputs.state }}" = "all" ]; then
        #   echo "📄 Analyzing all available states..."
        #   # Add logic for other states
        # fi

    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      if: inputs.generate-reports == 'true'
      with:
        name: llm-analysis-reports-${{ github.run_id }}
        path: |
          *.json
          llm_analysis_results.json
          wyoming_bill_tracker_report.json
        retention-days: 30

    - name: Generate summary
      shell: bash
      run: |
        echo "📊 LLM Analysis Summary"
        echo "========================"
        echo "Run ID: ${{ github.run_id }}"
        echo "State: ${{ inputs.state }}"
        echo "Timestamp: $(date)"
        echo ""
        echo "Reports generated:"
        ls -la *.json 2>/dev/null || echo "No JSON reports found"
        echo ""
        echo "Artifacts available for download"
