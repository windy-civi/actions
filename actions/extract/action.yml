name: "Text Extraction Action"
description: "Extracts text from PDFs and XMLs in processed bill data"

inputs:
  state:
    description: "State to process (2-letter abbreviation)"
    required: true
  github-token:
    description: "GitHub token for authentication"
    required: true
  force-update:
    description: "Force push changes even if there are upstream changes"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}/../..
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --deploy

    - name: Extract Text from PDFs and XMLs
      id: extract
      shell: bash
      working-directory: ${{ github.action_path }}/../..
      run: |
        echo "üìÑ Extracting text from PDFs and XMLs for ${{ inputs.state }}"

        # Check if the data directory exists in the calling repo (v2.0 structure)
        if [ ! -d "${{ github.workspace }}/country:us" ]; then
          echo "‚ùå Data directory not found: ${{ github.workspace }}/country:us"
          echo "Make sure the data pipeline has been run first"
          exit 1
        fi

        # Configure git for periodic commits
        cd "${{ github.workspace }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Pull latest changes to ensure we have the most recent metadata with timestamps
        # This prevents race conditions where a previous run just committed updates
        echo "üì• Pulling latest changes to get updated metadata..."
        git pull origin main || {
          echo "‚ö†Ô∏è Pull failed, continuing with current checkout"
        }

        # Create a flag file to control the auto-commit loop
        touch /tmp/text_extraction_running

        # Start background process for periodic commits (every 30 minutes)
        (
          while [ -f /tmp/text_extraction_running ]; do
            sleep 1800  # 30 minutes

            if [ -f /tmp/text_extraction_running ]; then
              cd "${{ github.workspace }}"

              # Check if there are changes in country:us/ or .windycivi/
              if ! git diff --quiet country:us/ .windycivi/ 2>/dev/null || ! git diff --staged --quiet country:us/ .windycivi/ 2>/dev/null; then
                echo "‚è∞ [$(date)] Auto-committing progress to prevent data loss..."

                # Try to add files - if this fails, kill the main process
                if ! git add country:us/ .windycivi/ 2>&1; then
                  echo "::error::‚ùå CRITICAL: Failed to git add files during auto-commit!"
                  echo "::error::This means progress cannot be saved. Terminating job."
                  # Kill the main text extraction process
                  pkill -P $$ python || true
                  exit 1
                fi

                if ! git diff --staged --quiet; then
                  # Pull before committing to avoid conflicts
                  if ! git pull --rebase origin main 2>&1; then
                    echo "‚ö†Ô∏è Rebase conflict, attempting to resolve..."
                    git checkout --ours country:us/ .windycivi/ || {
                      echo "::error::‚ùå CRITICAL: Failed to resolve conflicts during auto-commit!"
                      pkill -P $$ python || true
                      exit 1
                    }
                    git add country:us/ .windycivi/
                    git rebase --continue 2>/dev/null || true
                  fi

                  git commit -m "üîÑ Auto-save text extraction progress for ${{ inputs.state }} - $(date -u +%Y-%m-%dT%H:%M:%SZ)"

                  # Push with retries - if all fail, kill the job
                  PUSH_SUCCESS=false
                  for i in 1 2 3; do
                    if git push origin main 2>&1; then
                      echo "‚úÖ Progress saved (attempt $i)"
                      PUSH_SUCCESS=true
                      break
                    else
                      echo "‚ö†Ô∏è Push failed (attempt $i), pulling and retrying..."
                      git pull --rebase origin main 2>/dev/null || true
                      sleep 5
                    fi
                  done

                  if [ "$PUSH_SUCCESS" = "false" ]; then
                    echo "::error::‚ùå CRITICAL: Failed to push after 3 attempts during auto-commit!"
                    echo "::error::Cannot save progress. Terminating job to prevent data loss."
                    pkill -P $$ python || true
                    exit 1
                  fi
                fi
              fi
            fi
          done
        ) &

        AUTO_COMMIT_PID=$!
        echo "üîÑ Auto-commit process started (PID: $AUTO_COMMIT_PID)"

        # Change back to action directory to run Python
        cd "${{ github.action_path }}/../.."

        # Run text extraction using the main.py interface with incremental flag
        EXIT_CODE=0
        pipenv run python text_extraction/main.py \
          --state "${{ inputs.state }}" \
          --data-folder "${{ github.workspace }}" \
          --output-folder "${{ github.workspace }}" \
          --incremental || EXIT_CODE=$?

        # Stop the auto-commit background process
        rm -f /tmp/text_extraction_running
        wait $AUTO_COMMIT_PID 2>/dev/null || true

        if [ $EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Text extraction complete"
        else
          echo "‚ö†Ô∏è Text extraction ended with code $EXIT_CODE (progress has been auto-saved)"
          exit $EXIT_CODE
        fi

    - name: Commit Changes
      shell: bash
      run: |
        echo "üìù Committing extracted text files"

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add changes (bill text files in country:us/)
        git add country:us/ .windycivi/

        # Commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Pull latest changes before committing to avoid conflicts
          echo "üì• Pulling latest changes..."
          git pull --rebase origin main || {
            echo "‚ö†Ô∏è Rebase conflict detected, attempting to resolve..."
            git checkout --ours country:us/ .windycivi/
            git add country:us/ .windycivi/
            git rebase --continue || true
          }

          git commit -m "Extract text from PDFs/XMLs for ${{ inputs.state }} - $(date)"

          # Retry push up to 3 times in case of concurrent updates
          for i in 1 2 3; do
            if [ "${{ inputs.force-update }}" = "true" ]; then
              if git push --force-with-lease origin main; then
                echo "‚úÖ Changes pushed successfully (attempt $i)"
                break
              fi
            else
              if git push origin main; then
                echo "‚úÖ Changes pushed successfully (attempt $i)"
                break
              fi
            fi

            if [ $i -lt 3 ]; then
              echo "‚ö†Ô∏è Push failed (attempt $i), pulling and retrying..."
              git pull --rebase origin main
              sleep 2
            else
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
          done

          echo "‚úÖ Changes committed and pushed"
        fi
