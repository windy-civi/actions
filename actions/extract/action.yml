name: "Text Extraction Action"
description: "Extracts text from PDFs and XMLs in processed bill data"

inputs:
  state:
    description: "State to process (2-letter abbreviation)"
    required: true
  github-token:
    description: "GitHub token for authentication"
    required: true
  force-update:
    description: "Force push changes even if there are upstream changes"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}/../..
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --deploy

    - name: Extract Text from PDFs and XMLs
      shell: bash
      working-directory: ${{ github.action_path }}/../..
      run: |
        echo "üìÑ Extracting text from PDFs and XMLs for ${{ inputs.state }}"

        # Check if the data directory exists in the calling repo
        if [ ! -d "${{ github.workspace }}/data_output/data_processed" ]; then
          echo "‚ùå Data directory not found: ${{ github.workspace }}/data_output/data_processed"
          echo "Make sure the data pipeline has been run first"
          exit 1
        fi

        # Run text extraction using the main.py interface
        pipenv run python text_extraction/main.py \
          --state "${{ inputs.state }}" \
          --data-folder "${{ github.workspace }}/data_output/data_processed" \
          --output-folder "${{ github.workspace }}"

        echo "‚úÖ Text extraction complete"

    - name: Commit Changes
      shell: bash
      run: |
        echo "üìù Committing extracted text files"

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add changes
        git add data_output/

        # Commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Extract text from PDFs/XMLs for ${{ inputs.state }} - $(date)"

          # Push changes
          if [ "${{ inputs.force-update }}" = "true" ]; then
            git push --force-with-lease origin main
          else
            git push origin main
          fi

          echo "‚úÖ Changes committed and pushed"
        fi
