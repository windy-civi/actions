name: "Git Clone Action"
description: "A reusable GitHub Action for cloning repositories with flexible options"
author: "Your Name"

inputs:
  sources:
    description: "List of repositories to clone in format owner/repo"
    required: true
  token:
    description: "GitHub token for authentication"
    required: true

outputs:
  directories:
    description: "Comma-separated list of cloned directory paths"
    value: ${{ steps.clone.outputs.directories }}
  repository-count:
    description: "Number of repositories cloned"
    value: ${{ steps.clone.outputs.repository-count }}

runs:
  using: "composite"
  steps:
    - name: Clone Repository(ies)
      id: clone
      shell: bash
      run: |
        # Set default values
        TOKEN="${{ inputs.token }}"

        # Initialize arrays
        DIRECTORIES=()
        REPO_COUNT=0

        # Function to clone a single repository
        clone_repo() {
          local repo="$1"
          local dir="$2"
          
          echo "Cloning repository: $repo"
          
          # Validate repository format
          if [[ ! "$repo" =~ ^[^/]+/[^/]+$ ]]; then
            echo "Error: Invalid repository format. Expected 'owner/repo', got '$repo'"
            exit 1
          fi
          
          # Remove existing directory if it exists
          if [ -d "$dir" ]; then
            echo "Removing existing directory: $dir"
            rm -rf "$dir"
          fi
          
          # Clone the repository with error handling
          if ! git clone "https://$TOKEN@github.com/$repo.git" "$dir"; then
            echo "Error: Failed to clone repository $repo"
            exit 1
          fi
          
          # Verify the clone was successful
          if [ ! -d "$dir" ] || [ ! -d "$dir/.git" ]; then
            echo "Error: Repository clone verification failed for $repo"
            exit 1
          fi
          
          # Add to directories array
          DIRECTORIES+=("$dir")
          REPO_COUNT=$((REPO_COUNT + 1))
          
          echo "Successfully cloned $repo into $dir"
        }

        # Process sources (list of repositories)
        echo "Processing repositories from sources..."

        # Process each repository from sources
        while IFS= read -r repo; do
          # Skip empty lines
          if [ -z "$repo" ]; then
            continue
          fi
          
          # Remove any whitespace
          repo=$(echo "$repo" | xargs)
          
          # Use repository name as directory name in temp directory
          dir="$RUNNER_TEMP/$(basename "$repo")"
          
          clone_repo "$repo" "$dir"
        done <<< "${{ inputs.sources }}"

        # Set outputs
        IFS=','
        echo "directories=${DIRECTORIES[*]}" >> $GITHUB_OUTPUT
        echo "repository-count=$REPO_COUNT" >> $GITHUB_OUTPUT

        echo "Cloning completed successfully!"
        echo "Directories: ${DIRECTORIES[*]}"
        echo "Repository count: $REPO_COUNT"
