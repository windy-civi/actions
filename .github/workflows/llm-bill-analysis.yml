name: LLM Bill Analysis

on:
  schedule:
    - cron: "0 2 * * *" # every day at 2am UTC (after main data update)
  workflow_dispatch:
    inputs:
      state:
        type: choice
        description: 'State to analyze'
        options:
          - wy
          - all
        default: 'wy'
      api-key:
        type: string
        description: 'OpenAI API Key (or use repository secret)'
        required: false
      analyze-versions:
        type: boolean
        description: 'Analyze bill versions and track changes'
        default: true
      generate-reports:
        type: boolean
        description: 'Generate human-readable reports'
        default: true

jobs:
  llm-bill-analysis:
    name: LLM Bill Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdfplumber click requests

      - name: Set up OpenAI API Key
        run: |
          if [ -n "${{ inputs.api-key }}" ]; then
            echo "Using provided API key"
            echo "OPENAI_API_KEY=${{ inputs.api-key }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "Using repository secret API key"
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          else
            echo "No API key provided - will run in mock mode"
          fi

      - name: Run LLM Bill Analysis
        run: |
          echo "🤖 Starting LLM Bill Analysis"
          echo "State: ${{ inputs.state }}"
          echo "Analyze versions: ${{ inputs.analyze-versions }}"
          echo "Generate reports: ${{ inputs.generate-reports }}"
          
          # For now, run the Wyoming analysis
          if [ "${{ inputs.state }}" = "wy" ] || [ "${{ inputs.state }}" = "all" ]; then
            echo "📄 Analyzing Wyoming bills..."
            
            # Check if sample data exists
            if [ -d "sample_data/wy_sample" ]; then
              python openstates_scraped_data_formatter/cli_bill_tracker.py analyze \
                --show-summary \
                --verbose \
                --output "wyoming_llm_analysis_$(date +%Y%m%d_%H%M%S).json"
              
              echo "✅ Wyoming analysis complete"
            else
              echo "⚠️ No Wyoming sample data found"
            fi
          fi
          
          # Future: Add other states here
          # if [ "${{ inputs.state }}" = "all" ]; then
          #   echo "📄 Analyzing all available states..."
          #   # Add logic for other states
          # fi

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        if: inputs.generate-reports
        with:
          name: llm-analysis-reports-${{ github.run_id }}
          path: |
            *.json
            llm_analysis_results.json
            wyoming_bill_tracker_report.json
          retention-days: 30

      - name: Generate summary
        run: |
          echo "📊 LLM Analysis Summary"
          echo "========================"
          echo "Run ID: ${{ github.run_id }}"
          echo "State: ${{ inputs.state }}"
          echo "Timestamp: $(date)"
          echo ""
          echo "Reports generated:"
          ls -la *.json 2>/dev/null || echo "No JSON reports found"
          echo ""
          echo "Artifacts available for download"

      - name: Comment on workflow
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '🤖 LLM Bill Analysis Complete\n\n';
            
            try {
              const files = fs.readdirSync('.');
              const jsonFiles = files.filter(f => f.endsWith('.json'));
              
              if (jsonFiles.length > 0) {
                summary += '📄 Generated Reports:\n';
                jsonFiles.forEach(file => {
                  summary += `- \`${file}\`\n`;
                });
              } else {
                summary += '⚠️ No reports generated\n';
              }
            } catch (error) {
              summary += '⚠️ Could not read generated files\n';
            }
            
            summary += `\n📊 State: \`${{ inputs.state }}\``;
            summary += `\n🕒 Run ID: \`${{ github.run_id }}\``;
            summary += '\n\n💡 Download artifacts to view detailed reports';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
