name: 'Data Pipeline Action with Text Extraction'
description: 'Scrapes, cleans, formats state legislative data from OpenStates, and extracts text from PDFs/XMLs'

inputs:
  state:
    description: 'State to process (2-letter abbreviation)'
    required: true
  github-token:
    description: 'GitHub token for authentication'
    required: true
  use-scrape-cache:
    description: 'Use open states scraper cache'
    required: false
    default: 'false'
  force-update:
    description: 'Force push changes even if there are upstream changes'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --deploy

    - name: Scrape Data
      shell: bash
      run: |
        echo "üîç Scraping data for state: ${{ inputs.state }}"
        
        # Set up environment variables
        export STATE="${{ inputs.state }}"
        export USE_SCRAPE_CACHE="${{ inputs.use-scrape-cache }}"
        
        # Run scraping
        pipenv run python -m openstates.cli.scrape $STATE
        
        echo "‚úÖ Data scraping complete"

    - name: Format Data
      shell: bash
      run: |
        echo "üßπ Formatting data for blockchain-style output"
        
        # Set up environment variables
        export STATE="${{ inputs.state }}"
        
        # Run formatter
        pipenv run python openstates_scraped_data_formatter/main.py
        
        echo "‚úÖ Data formatting complete"

    - name: Extract Text from PDFs and XMLs
      shell: bash
      run: |
        echo "üìÑ Extracting text from PDFs and XMLs"
        
        # Run text extraction on the processed data
        pipenv run python openstates_scraped_data_formatter/utils/text_extraction.py data_output/data_processed
        
        echo "‚úÖ Text extraction complete"

    - name: Commit Changes
      shell: bash
      run: |
        echo "üìù Committing formatted data"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add data_output/ bill_session_mapping/ sessions/
        
        # Commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update data for ${{ inputs.state }} - $(date)"
          
          # Push changes
          if [ "${{ inputs.force-update }}" = "true" ]; then
            git push --force-with-lease origin main
          else
            git push origin main
          fi
          
          echo "‚úÖ Changes committed and pushed"
        fi
