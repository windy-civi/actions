name: 'OpenStates Data Pipeline'
description: 'Complete pipeline to scrape, sanitize, and format OpenStates data'

# USAGE EXAMPLE:
# This composite action requires secrets to be passed as inputs when used by other repositories:
#
# - name: Run OpenStates Pipeline
#   uses: ./
#   with:
#     state: 'tx'
#     github-token: ${{ secrets.GITHUB_TOKEN }}
#     allow-session-fix: 'false'
#
# SECRETS HANDLING:
# - github-token: Pass ${{ secrets.GITHUB_TOKEN }} or a PAT with repo permissions
# - All other secrets must be explicitly passed as inputs

inputs:
  state:
    description: 'State abbreviation (e.g., id, il, tx, ny)'
    required: true
  github-token:
    description: 'GitHub token for creating releases and downloading artifacts'
    required: true
    default: '${{ github.token }}'
  allow-session-fix:
    description: 'Allow interactive session fixes when session names are missing'
    required: false
    default: 'false'
  use-scrape-cache:
    description: 'Skip scraping and use the most recent artifact from this repository instead'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Setup Working Directory
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üîß Setting up working directory..."
        # Create working directory outside git repo
        mkdir -p ${RUNNER_TEMP}
        echo "‚úÖ Working directory created at ${RUNNER_TEMP}"

    - name: Cache Scrapes
      if: inputs.use-scrape-cache != 'true'
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/cache
        key: cache-scrapes-${{ inputs.state }}-${{ github.sha }}
        restore-keys: |
          cache-scrapes-${{ inputs.state }}-
          cache-scrape

    - name: Scrape Data
      if: inputs.use-scrape-cache != 'true'
      working-directory: ${{ runner.temp }}
      shell: bash
      run: |
        echo "üï∑Ô∏è Starting data scraping for ${{ inputs.state }}..."
        # Ensure directories exist
        mkdir -p ./_working/_data
        mkdir -p ./_working/_cache
        
        echo "üê≥ Running scraper in Docker container..."
        docker pull openstates/scrapers:latest
        docker run \
            -v "$(pwd)/_working/_data":/opt/openstates/openstates/_data \
            -v "$(pwd)/_working/_cache":/opt/openstates/openstates/_cache \
            openstates/scrapers:latest \
            ${{ inputs.state }} bills --scrape --fastmode
        echo "‚úÖ Data scraping completed"
        
        echo "üì¶ Creating archive of scraped data..."
        tar zcvf scrape-snapshot-nightly.tgz --mode=755 -C _working/_data .
        echo "‚úÖ Data archived successfully"

    # - name: Upload OCD Scraped Data as Artifact
    #   if: inputs.use-scrape-cache != 'true'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ocd-scraped-data-${{ inputs.state }}
    #     path: ${{ runner.temp }}/${{ inputs.state }}.zip
    #     retention-days: 30

    - name: Update Nightly Release
      if: inputs.use-scrape-cache != 'true'
      uses: andelf/nightly-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag_name: nightly
        name: "Nightly release of legislation $$"
        prerelease: false
        files: |
          ${{ runner.temp }}/scrape-snapshot-nightly.tgz

    # - name: Download release
    #   uses: robinraju/release-downloader@v1
    #   with:
    #     token: ${{ inputs.github-token }}
    #     tag: 'nightly'
    #     out-file-path: ${{ github.workspace }}/downloaded_release

    - name: Download asset README.md from release with tag v3.0.0 
      uses: Xotl/cool-github-releases@v1
      with:
        mode: download
        tag_name: nightly
        assets: scrape-snapshot-nightly.tgz|${{ runner.temp }}/scrape-snapshot-nightly.tgz
        github_token: ${{ inputs.github-token }}

    - name: Extract Nightly Scrape Data
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        echo "üì¶ Extracting nightly scrape data..."
        mkdir -p scrape-snapshot-nightly
        tar xzf scrape-snapshot-nightly.tgz -C ${{ runner.temp }}/scrape-snapshot-nightly
        echo "‚úÖ Extraction complete"

    - name: Show Output Directory Structure
      shell: bash
      working-directory: ${{ runner.temp }}/scrape-snapshot-nightly
      run: |
        echo "üìÇ Output directory structure:"
        tree -L 3 -f -n --filelimit 5 ./
        echo "‚úÖ Directory listing complete"