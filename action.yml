name: 'OpenStates Data Pipeline'
description: 'Complete pipeline to scrape, sanitize, and format OpenStates data'

inputs:
  state:
    description: 'State abbreviation (e.g., id, il, tx, ny)'
    required: true
  allow-session-fix:
    description: 'Allow interactive session fixes when session names are missing'
    required: false
    default: 'false'
  use-scrape-cache:
    description: 'Skip scraping and use the most recent artifact from this repository instead'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Setup Working Directory
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔧 Setting up working directory..."
        # Create working directory outside git repo
        mkdir -p ${RUNNER_TEMP}/_working
        echo "✅ Working directory created at ${RUNNER_TEMP}/_working"

    - name: Cache Scrapes
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/_working/cache
        key: cache-scrapes-${{ inputs.state }}-${{ github.sha }}
        restore-keys: |
          cache-scrapes-${{ inputs.state }}-
          cache-scrapes-

    - name: Clone and Build Scrapers from Source
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔧 Cloning OpenStates scrapers repository..."
        git clone https://github.com/openstates/openstates-scrapers.git
        echo "📦 Building Docker image for scrapers..."
        cd openstates-scrapers
        docker build -t openstates/scrapers:dev .
        echo "✅ Docker image built successfully"

    - name: Scrape Data
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🕷️ Starting data scraping for ${{ inputs.state }}..."
        # Ensure directories exist
        mkdir -p ${RUNNER_TEMP}/_working/data
        mkdir -p ${RUNNER_TEMP}/_working/cache
        
        echo "🐳 Running scraper in Docker container..."
        docker run \
            -v "${RUNNER_TEMP}/_working/data":/opt/openstates/openstates/_data \
            -v "${RUNNER_TEMP}/_working/cache":/opt/openstates/openstates/_cache \
            openstates/scrapers:dev \
            $STATE bills --scrape --fastmode
        echo "✅ Data scraping completed"
        
    - name: Zip Scraped Data
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ runner.temp }}/_working
      run: |
        echo "📦 Zipping scraped data for ${{ inputs.state }}..."
        zip -r ${{ inputs.state }}.zip data/${{ inputs.state }}/
        echo "✅ Data zipped successfully"

    - name: Upload OCD Scraped Data as Artifact
      if: inputs.use-scrape-cache != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ocd-scraped-data-${{ inputs.state }}
        path: ${{ runner.temp }}/_working/${{ inputs.state }}.zip
        retention-days: 30

    - name: Skip scraping (using latest artifact)
      if: inputs.use-scrape-cache == 'true'
      shell: bash
      working-directory: ${{ runner.temp }}/_working
      run: |
        echo "⏭️ Skipping scraping - using latest artifact data"
        echo "✅ Using pre-processed data from latest artifact"

    - name: Download OCD Scraped Data for Processing
      uses: actions/download-artifact@v4
      with:
        name: ocd-scraped-data-${{ inputs.state }}
        path: ${{ runner.temp }}/_working/

    - name: Unzip Scraped Data
      shell: bash
      working-directory: ${{ runner.temp }}/_working
      run: |
        echo "📂 Unzipping scraped data for ${{ inputs.state }}..."
        unzip -o ${{ inputs.state }}.zip
        rm ${{ inputs.state }}.zip
        echo "✅ Data unzipped successfully"

    - name: Sanitize Data (removes _id and scraped_at)
      shell: bash
      working-directory: ${{ runner.temp }}/_working
      run: |
        echo "🧹 Sanitizing JSON data (removing _id and scraped_at fields)..."
        # Sanitize JSON files with proper error handling
        find data/${{ inputs.state }}/ -type f -name "*.json" -exec bash -c '
          if [ -f "{}" ]; then
            jq "del(..|._id?, .scraped_at?)" "{}" > "{}.tmp" && mv "{}.tmp" "{}"
          fi
        ' \;
        echo "✅ Data sanitization completed"

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "📦 Installing Python dependencies..."
        pip install pipenv
        pipenv install --deploy
        echo "✅ Dependencies installed successfully"

    - name: Format scraped data
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ github.workspace }}/openstates_scraped_data_formatter
      env:
        FORMATTER_INPUT_FOLDER: ${{ runner.temp }}/_working/data/${{ inputs.state }}
      run: |
        echo "🔧 Formatting scraped data for ${{ inputs.state }}..."
        pipenv run python main.py \
          --state ${{ inputs.state }} \
          --input-folder ${{ runner.temp }}/_working/data/${{ inputs.state }} \
          --allow-session-fix ${{ inputs.allow-session-fix }}
        echo "✅ Data formatting completed"

    - name: Upload OCD Blockchain Data as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ocd-blockchain-data-${{ inputs.state }}
        path: data_output/
        retention-days: 30