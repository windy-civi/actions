name: 'OpenStates Data Pipeline'
description: 'Complete pipeline to scrape, sanitize, and format OpenStates data'

# USAGE EXAMPLE:
# This composite action requires secrets to be passed as inputs when used by other repositories:
#
# - name: Run OpenStates Pipeline
#   uses: ./
#   with:
#     state: 'tx'
#     github-token: ${{ secrets.GITHUB_TOKEN }}
#     allow-session-fix: 'false'
#
# SECRETS HANDLING:
# - github-token: Pass ${{ secrets.GITHUB_TOKEN }} or a PAT with repo permissions
# - All other secrets must be explicitly passed as inputs

inputs:
  state:
    description: 'State abbreviation (e.g., id, il, tx, ny)'
    required: true
  github-token:
    description: 'GitHub token for creating releases and downloading artifacts'
    required: true
    default: '${{ github.token }}'
  allow-session-fix:
    description: 'Allow interactive session fixes when session names are missing'
    required: false
    default: 'false'
  use-scrape-cache:
    description: 'Skip scraping and use the most recent artifact from this repository instead'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Setup Working Directory
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üîß Setting up working directory..."
        # Create working directory outside git repo
        mkdir -p ${RUNNER_TEMP}
        mkdir -p ${RUNNER_TEMP}/scrape-snapshot-nightly
        echo "‚úÖ Working directory created at ${RUNNER_TEMP}"

    - name: Cache Scrapes
      if: inputs.use-scrape-cache != 'true'
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/cache
        key: cache-scrapes-${{ inputs.state }}-${{ github.sha }}
        restore-keys: |
          cache-scrapes-${{ inputs.state }}-
          cache-scrape

    - name: Scrape Data
      if: inputs.use-scrape-cache != 'true'
      working-directory: ${{ runner.temp }}
      shell: bash
      run: |
        echo "üï∑Ô∏è Starting data scraping for ${{ inputs.state }}..."
        # Ensure directories exist
        mkdir -p ./_working/_data
        mkdir -p ./_working/_cache
        
        echo "üê≥ Running scraper in Docker container..."
        docker pull openstates/scrapers:latest
        docker run \
            -v "$(pwd)/_working/_data":/opt/openstates/openstates/_data \
            -v "$(pwd)/_working/_cache":/opt/openstates/openstates/_cache \
            openstates/scrapers:latest \
            ${{ inputs.state }} bills --scrape --fastmode
        echo "‚úÖ Data scraping completed"
        
        echo "üì¶ Creating archive of scraped data..."
        tar zcvf scrape-snapshot-nightly.tgz --mode=755 -C _working/_data/${{ inputs.state }} .
        echo "‚úÖ Data archived successfully"

    - name: Upload OCD Scraped Data as Artifact
      if: inputs.use-scrape-cache != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: scrape-snapshot-nightly
        path: ${{ runner.temp }}/scrape-snapshot-nightly.tgz
        retention-days: 30

    - name: Update Nightly Release
      if: inputs.use-scrape-cache != 'true'
      uses: andelf/nightly-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag_name: nightly
        name: "Nightly release of legislation $$"
        prerelease: false
        files: |
          ${{ runner.temp }}/scrape-snapshot-nightly.tgz

    - name: Download asset scrape-snapshot-nightly.tgz from nightly release
      uses: Xotl/cool-github-releases@v1
      with:
        mode: download
        tag_name: nightly
        assets: scrape-snapshot-nightly.tgz
        github_token: ${{ inputs.github-token }}

    - name: Extract Nightly Scrape Data
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üì¶ Extracting nightly scrape data..."
        tar xzf scrape-snapshot-nightly.tgz -C ${{ runner.temp }}/scrape-snapshot-nightly
        rm scrape-snapshot-nightly.tgz
        echo "‚úÖ Extraction complete"

    - name: Verify count of files are present
      shell: bash
      working-directory: ${{ runner.temp }}/scrape-snapshot-nightly
      run: |
        echo "üìÇ Counting JSON files..."
        find . -type f -name "*.json" | wc -l
        echo "‚úÖ JSON file count complete"

    - name: Sanitize Data (removes _id and scraped_at)
      shell: bash
      working-directory: ${{ runner.temp }}/scrape-snapshot-nightly
      run: |
        echo "üßπ Sanitizing JSON data (removing _id and scraped_at fields)..."
        # Initialize counter
        count=0
        # Sanitize JSON files with proper error handling and count
        find ./ -type f -name "*.json" -exec bash -c '
          if [ -f "{}" ]; then
            jq "del(..|._id?, .scraped_at?)" "{}" > "{}.tmp" && mv "{}.tmp" "{}"
            echo "$((++count))" > count.tmp
          fi
        ' \;
        count=$(cat count.tmp)
        rm count.tmp
        echo "‚úÖ Data sanitization completed - processed $count files"

    - name: Convert Data To Blockchain Format
      shell: bash
      env:
        FORMATTER_INPUT_FOLDER: ${{ runner.temp }}/scrape-snapshot-nightly
        FORMATTER_OUTPUT_FOLDER: ${{ github.workspace }}/ocd-blockchain-${{ inputs.state }}
        STATE: ${{ inputs.state }}
      run: |
        cd ${{ github.action_path }}
        pip install pipenv
        pipenv install
        pipenv run python ${{ github.action_path }}/openstates_scraped_data_formatter/main.py --state $STATE --input-folder $FORMATTER_INPUT_FOLDER --output-folder $FORMATTER_OUTPUT_FOLDER

    - name: Clone Caller Repository and Push Changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        CALLER_REPO: ${{ github.repository }}
        FORMATTER_OUTPUT_FOLDER: ${{ github.workspace }}/ocd-blockchain-${{ inputs.state }}
      run: |
        echo "üîß Setting up git configuration..."
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        echo "üìã Getting caller repository information..."
        # Extract owner and repo name from the caller's repository
        CALLER_OWNER=$(echo $CALLER_REPO | cut -d'/' -f1)
        CALLER_REPO_NAME=$(echo $CALLER_REPO | cut -d'/' -f2)
        
        echo "üì• Cloning caller repository..."
        git clone https://x-access-token:${GITHUB_TOKEN}@github.com/${CALLER_REPO}.git caller-repo
        cd caller-repo
        
        echo "üìÅ Copying formatter output to caller repository..."
        # Copy all contents from FORMATTER_OUTPUT_FOLDER to the root of caller repo
        cp -r $FORMATTER_OUTPUT_FOLDER/* ./
        
        echo "üìä Checking git status..."
        git status
        
        echo "‚úÖ Repository update completed"

    # - name: Copy Scraped Data to Repo
    #     run: |
    #       mkdir -p "$GITHUB_WORKSPACE/_data/$STATE"
    #       cp -r "${RUNNER_TEMP}/_working/_data/$STATE"/* "$GITHUB_WORKSPACE/_data/$STATE/"

    # - name: Update Repo
    #     env:
    #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: |
    #       git config user.email "no_email"
    #       git config user.name "Windy Civi Bot"
    #       git fetch origin main
    #       git pull origin main --rebase || true

    #       git add _data data_output bill_session_mapping sessions
    #       git diff --cached --quiet && echo "No changes to commit" || git commit -m "Automated report update (report dated ${{ steps.get-date.outputs.date }})"
    #       git push || echo "‚ö†Ô∏è Git push failed ‚Äî possibly due to upstream changes."
 # - name: Update Repo
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   shell: bash
      #   run: |
      #     git config user.email "no_email"
      #     git config user.name "Windy Civi Bot"
      #     git fetch origin main
      #     git pull origin main --rebase || true

      #     git add data_output bill_session_mapping sessions
      #     git diff --cached --quiet && echo "No changes to commit" || git commit -m "Automated report update (report dated ${{ steps.get-date.outputs.date }})"
      #     git push || echo "‚ö†Ô∏è Git push failed ‚Äî possibly due to upstream changes."