name: 'OpenStates Data Pipeline'
description: 'Complete pipeline to scrape, sanitize, and format OpenStates data'

# USAGE EXAMPLE:
# This composite action requires secrets to be passed as inputs when used by other repositories:
#
# - name: Run OpenStates Pipeline
#   uses: ./
#   with:
#     state: 'tx'
#     github-token: ${{ secrets.GITHUB_TOKEN }}
#     allow-session-fix: 'false'
#
# SECRETS HANDLING:
# - github-token: Pass ${{ secrets.GITHUB_TOKEN }} or a PAT with repo permissions
# - All other secrets must be explicitly passed as inputs

inputs:
  state:
    description: 'State abbreviation (e.g., id, il, tx, ny)'
    required: true
  allow-session-fix:
    description: 'Allow interactive session fixes when session names are missing'
    required: false
    default: 'false'
  use-scrape-cache:
    description: 'Skip scraping and use the most recent artifact from this repository instead'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for creating releases and downloading artifacts'
    required: false
    default: '${{ github.token }}'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Setup Working Directory
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔧 Setting up working directory..."
        # Create working directory outside git repo
        mkdir -p ${RUNNER_TEMP}/_working
        echo "✅ Working directory created at ${RUNNER_TEMP}/_working"

    - name: Cache Scrapes
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/_working/cache
        key: cache-scrapes-${{ inputs.state }}-${{ github.sha }}
        restore-keys: |
          cache-scrapes-${{ inputs.state }}-
          cache-scrapes-

    - name: Clone and Build Scrapers from Source
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔧 Cloning OpenStates scrapers repository..."
        git clone https://github.com/openstates/openstates-scrapers.git
        echo "📦 Building Docker image for scrapers..."
        cd openstates-scrapers
        docker build -t openstates/scrapers:dev .
        echo "✅ Docker image built successfully"

    - name: Scrape Data
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🕷️ Starting data scraping for ${{ inputs.state }}..."
        # Ensure directories exist
        mkdir -p ${RUNNER_TEMP}/_working/data
        mkdir -p ${RUNNER_TEMP}/_working/cache
        
        echo "🐳 Running scraper in Docker container..."
        docker run \
            -v "${RUNNER_TEMP}/_working/data":/opt/openstates/openstates/_data \
            -v "${RUNNER_TEMP}/_working/cache":/opt/openstates/openstates/_cache \
            openstates/scrapers:dev \
            $STATE bills --scrape --fastmode
        echo "✅ Data scraping completed"
        
    - name: Zip Scraped Data
      shell: bash
      working-directory: ${{ runner.temp }}/_working
      run: |
        echo "📦 Zipping scraped data for ${{ inputs.state }}..."
        zip -r ${{ inputs.state }}.zip data/${{ inputs.state }}/
        echo "✅ Data zipped successfully"

    - name: Upload OCD Scraped Data as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ocd-scraped-data-${{ inputs.state }}
        path: ${{ runner.temp }}/_working/${{ inputs.state }}.zip
        retention-days: 30

    - name: Create Release and Upload Asset
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "📦 Creating release for ${{ inputs.state }}..."
        
        # Create release with asset in one command
        gh release create \
          "latest" \
          --title "Latest Scraped Data - ${{ inputs.state }}" \
          --notes "Latest scraped data artifacts for ${{ inputs.state }}
        
        - State: ${{ inputs.state }}
        - Run Number: ${{ github.run_number }}
        - Commit: ${{ github.sha }}
        - Branch: ${{ github.ref_name }}" \
          --repo ${{ github.repository }} \
          "${{ runner.temp }}/_working/${{ inputs.state }}.zip#Scraped Data for ${{ inputs.state }}"
        
        echo "✅ Release created and asset uploaded successfully"
