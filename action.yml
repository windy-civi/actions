name: "Data Pipeline Action"
description: "Scrapes, cleans, and formats state legislative data from OpenStates"

inputs:
  state:
    description: "State to process (2-letter abbreviation or 'usa')"
    required: true
  github-token:
    description: "GitHub token for authentication (optional)"
    required: false
  use-scrape-cache:
    description: "Use OpenStates scraper cache"
    required: false
    default: "false"
  force-update:
    description: "Force push changes even if there are upstream changes"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13" # must match Pipfile [requires]

    - name: Install dependencies (pipenv)
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        PIPENV_VENV_IN_PROJECT: "1"
        PIPENV_IGNORE_VIRTUALENVS: "1"
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install pipenv
        # Use the committed lockfile; fail if out of date
        pipenv install --deploy --dev

    - name: Scrape Data
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        STATE: ${{ inputs.state }}
        USE_SCRAPE_CACHE: ${{ inputs.use-scrape-cache }}
      run: |
        set -euo pipefail
        echo "üîç Scraping data for state: ${STATE}"
        pipenv run python -m openstates.cli.scrape "${STATE}"
        echo "‚úÖ Data scraping complete"

    - name: Format Data
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        STATE: ${{ inputs.state }}
      run: |
        set -euo pipefail
        echo "üßπ Formatting data for blockchain-style output"
        pipenv run python openstates_scraped_data_formatter/main.py
        echo "‚úÖ Data formatting complete"

    # Commit/push must happen in the CALLER repo (default working dir)
    - name: Commit Changes
      shell: bash
      run: |
        set -euo pipefail
        echo "üìù Committing formatted data"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add data_output/ bill_session_mapping/ sessions/ || true

        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update data for ${{ inputs.state }} - $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          if [ "${{ inputs.force-update }}" = "true" ]; then
            git push --force-with-lease origin main
          else
            git push origin main
          fi
          echo "‚úÖ Changes committed and pushed"
        fi
