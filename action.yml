name: 'OpenStates Data Pipeline'
description: 'Complete pipeline to scrape, sanitize, and format OpenStates data'

inputs:
  state:
    description: 'State abbreviation (e.g., id, il, tx, ny)'
    required: true
  allow-session-fix:
    description: 'Allow interactive session fixes when session names are missing'
    required: false
    default: 'false'
  use-scrape-cache:
    description: 'Skip scraping and use the most recent artifact from this repository instead'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Setup Working Directory
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üîß Setting up working directories..."
        # Create working directories
        mkdir -p ${RUNNER_TEMP}/_working/_data
        mkdir -p ${RUNNER_TEMP}/_working/_cache
        echo "‚úÖ Working directories created successfully"

    - name: Cache Scrapes
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/_working/_cache
        key: cache-scrapes-${{ inputs.state }}-${{ github.sha }}
        restore-keys: |
          cache-scrapes-${{ inputs.state }}-
          cache-scrapes-

    - name: Clone and Build Scrapers from Source
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üîß Cloning OpenStates scrapers repository..."
        git clone https://github.com/openstates/openstates-scrapers.git
        echo "üì¶ Building Docker image for scrapers..."
        cd openstates-scrapers
        docker build -t openstates/scrapers:dev .
        echo "‚úÖ Docker image built successfully"

    - name: Scrape Data
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üï∑Ô∏è Starting data scraping for ${{ inputs.state }}..."
        # Ensure directories exist
        mkdir -p ${RUNNER_TEMP}/_working/_data
        mkdir -p ${RUNNER_TEMP}/_working/_cache
        
        echo "üê≥ Running scraper in Docker container..."
        docker run \
            -v "${RUNNER_TEMP}/_working/_data":/opt/openstates/openstates/_data \
            -v "${RUNNER_TEMP}/_working/_cache":/opt/openstates/openstates/_cache \
            openstates/scrapers:dev \
            $STATE bills --scrape --fastmode
        echo "‚úÖ Data scraping completed"
        
    - name: Zip Scraped Data
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üì¶ Zipping scraped data for ${{ inputs.state }}..."
        cd ${RUNNER_TEMP}/_working/_data
        zip -r ${{ inputs.state }}.zip ${{ inputs.state }}/
        echo "‚úÖ Data zipped successfully"

    - name: Upload OCD Scraped Data as Artifact
      if: inputs.use-scrape-cache != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ocd-scraped-data-${{ inputs.state }}
        path: ${{ runner.temp }}/_working/_data/${{ inputs.state }}.zip
        retention-days: 30

    - name: Download OCD Scraped Data for Processing
      uses: actions/download-artifact@v4
      with:
        name: ocd-scraped-data-${{ inputs.state }}
        path: ./

    - name: Unzip Scraped Data
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üìÇ Unzipping scraped data for ${{ inputs.state }}..."
        unzip -o ${{ inputs.state }}.zip -d ./
        rm ${{ inputs.state }}.zip
        echo "‚úÖ Data unzipped successfully"

    - name: Sanitize Data (removes _id and scraped_at)
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üßπ Sanitizing JSON data (removing _id and scraped_at fields)..."
        # Sanitize JSON files with proper error handling
        find ./ -type f -name "*.json" -exec bash -c '
          if [ -f "{}" ]; then
            jq "del(..|._id?, .scraped_at?)" "{}" > "{}.tmp" && mv "{}.tmp" "{}"
          fi
        ' \;
        echo "‚úÖ Data sanitization completed"

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "üì¶ Installing Python dependencies..."
        pip install pipenv
        pipenv install --deploy
        echo "‚úÖ Dependencies installed successfully"

    - name: Format scraped data
      if: inputs.use-scrape-cache != 'true'
      shell: bash
      working-directory: ./openstates_scraped_data_formatter
      env:
        FORMATTER_INPUT_FOLDER: ./
      run: |
        echo "üîß Formatting scraped data for ${{ inputs.state }}..."
        pipenv run python main.py \
          --state ${{ inputs.state }} \
          --input-folder ./ \
          --allow-session-fix ${{ inputs.allow-session-fix }}
        echo "‚úÖ Data formatting completed"

    - name: Skip scraping (using latest artifact)
      if: inputs.use-scrape-cache == 'true'
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "‚è≠Ô∏è Skipping scraping - using latest artifact data"
        echo "‚úÖ Using pre-processed data from latest artifact"

    - name: Upload OCD Blockchain Data as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ocd-blockchain-data-${{ inputs.state }}
        path: data_output/
        retention-days: 30